// –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –º–æ–¥—É–ª–∏, –∏—Å–ø–æ–ª—å–∑—É—è —Å–∏–Ω—Ç–∞–∫—Å–∏—Å ES Modules
import express from 'express';
import cors from 'cors';
import bodyParser from 'body-parser';
import helmet from 'helmet';
import rateLimit from 'express-rate-limit';
import { body, validationResult } from 'express-validator';
import nodemailer from 'nodemailer';
import path from 'path';
import admin from 'firebase-admin';
import { fileURLToPath } from 'url';

// –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ —Ñ–∞–π–ª–∞ .env
import 'dotenv/config';

// --- –í–∞–∂–Ω–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –¥–ª—è ES Modules ---
// –ü–æ–ª—É—á–∞–µ–º __dirname, —Ç–∞–∫ –∫–∞–∫ –æ–Ω –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω –≤ ES-–º–æ–¥—É–ª—è—Ö –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

// –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –≤—Å–µ—Ö –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è.
const requiredEnv = [
    'PORT', 'EMAIL_HOST', 'EMAIL_PORT', 'EMAIL_SECURE', 'EMAIL_USER', 'EMAIL_PASS', 'EMAIL_RECEIVER',
    'FIREBASE_PROJECT_ID', 'GOOGLE_APPLICATION_CREDENTIALS'
];
for (const envVar of requiredEnv) {
    if (!process.env[envVar]) {
        console.error(`\x1b[31m–ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è ${envVar} –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞ –≤ —Ñ–∞–π–ª–µ .env.\x1b[0m`);
        process.exit(1);
    }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Firebase Admin SDK
try {
    admin.initializeApp({
        credential: admin.credential.applicationDefault(),
        projectId: process.env.FIREBASE_PROJECT_ID,
    });
    console.log('\x1b[32m‚úÖ Firebase Admin SDK —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω.\x1b[0m');
} catch (error) {
    console.error('\x1b[31m--- –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Firebase Admin SDK ---', error);
    process.exit(1);
}
const db = admin.firestore();

const app = express();
const PORT = process.env.PORT;

// --- –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –§–∏–Ω–∞–ª—å–Ω–∞—è, –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –ø–æ–ª–∏—Ç–∏–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ ---
app.use(
    helmet.contentSecurityPolicy({
        directives: {
            defaultSrc: ["'self'"],
            scriptSrc: [
                "'self'",
                "https://cdn.tailwindcss.com",
                "https://unpkg.com",
                "'unsafe-inline'", // –†–∞–∑—Ä–µ—à–∞–µ—Ç –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ —Å–∫—Ä–∏–ø—Ç—ã (–¥–ª—è tailwind.config)
                "'unsafe-eval'",   // –†–∞–∑—Ä–µ—à–∞–µ—Ç eval (–Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –¥–ª—è Vue –≤ —Ä–µ–∂–∏–º–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏)
            ],
            styleSrc: ["'self'", "https://fonts.googleapis.com", "'unsafe-inline'"],
            fontSrc: ["'self'", "https://fonts.gstatic.com"],
            imgSrc: ["'self'", "data:", "https://placehold.co"],
            frameSrc: ["'self'", "https://www.google.com/"],
            connectSrc: ["'self'", "https://firestore.googleapis.com", `http://localhost:${PORT}`]
        },
    })
);

// –û—Å—Ç–∞–ª—å–Ω—ã–µ Middleware
app.use(bodyParser.json());
app.use(cors());
const limiter = rateLimit({
    windowMs: 15 * 60 * 1000,
    max: 100,
});
app.use('/api/', limiter);

// –†–∞–∑–¥–∞—á–∞ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Ñ–∞–π–ª–æ–≤ –∏–∑ –ø–∞–ø–∫–∏ 'dist'
app.use(express.static(path.join(__dirname, 'dist')));

// API –≠–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–æ—Ä–º—ã
app.post(
    '/api/submit-form',
    [
        body('name').trim().notEmpty().withMessage('–ò–º—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º'),
        body('phone').trim().notEmpty().withMessage('–¢–µ–ª–µ—Ñ–æ–Ω –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º'),
        body('email').trim().isEmail().withMessage('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email –∞–¥—Ä–µ—Å'),
        body('task').trim().notEmpty().withMessage('–û–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º')
    ],
    async (req, res) => {
        const errors = validationResult(req);
        if (!errors.isEmpty()) {
            return res.status(400).json({ success: false, message: '–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏', errors: errors.array() });
        }

        const { name, phone, email, company, task, promo } = req.body;
        const newSubmission = { name, phone, email, company: company || '–ù–µ —É–∫–∞–∑–∞–Ω–∞', task, promo: promo || '–ù–µ —É–∫–∞–∑–∞–Ω', timestamp: admin.firestore.FieldValue.serverTimestamp(), ip: req.ip, userAgent: req.headers['user-agent'] };

        // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Nodemailer
        const transporter = nodemailer.createTransport({
            host: process.env.EMAIL_HOST,
            port: parseInt(process.env.EMAIL_PORT, 10),
            secure: process.env.EMAIL_SECURE === 'true',
            auth: { user: process.env.EMAIL_USER, pass: process.env.EMAIL_PASS },
        });

        transporter.verify((error) => {
            if (error) console.error('\x1b[31m–û—à–∏–±–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ Nodemailer:\x1b[0m', error);
            else console.log('\x1b[32m‚úÖ Nodemailer –≥–æ—Ç–æ–≤ –∫ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø–∏—Å–µ–º.\x1b[0m');
        });

        try {
            await transporter.sendMail({
                from: `"–§–æ—Ä–º–∞ —Å —Å–∞–π—Ç–∞ RedPanda" <${process.env.EMAIL_USER}>`,
                to: process.env.EMAIL_RECEIVER,
                subject: `–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ —Å —Å–∞–π—Ç–∞ –æ—Ç ${name}`,
                html: `<div style="font-family: Arial, sans-serif; line-height: 1.6;"><h2>–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ —Ä–∞—Å—á—ë—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏</h2><p><strong>–ò–º—è:</strong> ${name}</p><p><strong>–¢–µ–ª–µ—Ñ–æ–Ω:</strong> ${phone}</p><p><strong>Email:</strong> ${email}</p><p><strong>–ö–æ–º–ø–∞–Ω–∏—è:</strong> ${newSubmission.company}</p><p><strong>–ü—Ä–æ–º–æ–∫–æ–¥:</strong> ${newSubmission.promo}</p><hr><h3>–ó–∞–¥–∞—á–∞:</h3><p>${task}</p></div>`,
            });
            console.log(`–ü–∏—Å—å–º–æ —Å –∑–∞—è–≤–∫–æ–π –æ—Ç ${name} —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ.`);

            const docRef = await db.collection('submissions').add(newSubmission);
            console.log(`–ó–∞—è–≤–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ Firestore —Å ID: ${docRef.id}`);
            
            res.status(200).json({ success: true, message: '–ó–∞—è–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!' });
        } catch (error) {
            console.error('\x1b[31m=====================================');
            console.error('      –û–®–ò–ë–ö–ê –ü–†–ò –û–ë–†–ê–ë–û–¢–ö–ï –ó–ê–Ø–í–ö–ò');
            console.error('=====================================\x1b[0m');
            console.error('–í—Ä–µ–º—è:', new Date().toISOString());
            console.error('–ü–æ–ª–Ω—ã–µ –¥–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏:', error);
            res.status(500).json({ success: false, message: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞. –°–º. –∫–æ–Ω—Å–æ–ª—å —Å–µ—Ä–≤–µ—Ä–∞.' });
        }
    }
);

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è SPA
app.get('*', (req, res) => {
    res.sendFile(path.join(__dirname, 'dist', 'index.html'));
});

// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
app.listen(PORT, () => {
    console.log(`\x1b[36müöÄ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}. –û—Ç–∫—Ä–æ–π—Ç–µ —Å–∞–π—Ç –ø–æ –∞–¥—Ä–µ—Å—É http://localhost:${PORT}\x1b[0m`);
});